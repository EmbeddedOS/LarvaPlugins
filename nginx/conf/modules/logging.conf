# Access log format:
log_format  main_ext  '[$time_local] rle="$request_length" bs="$body_bytes_sent" rt="$request_time" '
                      'ut="$upstream_response_time" ul="$upstream_response_length" '
                      'ucl="$upstream_http_content_length" '
                      'cache_status="$upstream_cache_status" '
                      'ip="$remote_addr" remote_u="$remote_user" forward_for="$http_x_forwarded_for" r_line="$request" '
                      'status="$status" ref="$http_referer" '
                      'u_agent="$http_user_agent" '
                      'host="$host" port="$server_port" '
                      'up_addr="$upstream_addr" up_status="$upstream_status"';

access_log  /usr/nginx/logs/access.log main_ext;

# traffic-accounting-nginx-module: https://github.com/Lax/traffic-accounting-nginx-module
# Monitor the incoming and outgoing traffic metrics in realtime for NGINX. A realtime
# traffic and status code monitor solution for NGINX, which needs less memory and cpu
# than other realtime log analyzing solutions. Useful for traffic accounting based on
# NGINX config logic (by location / server / user-defined-variables).
# accounting off;
# accounting_log /usr/nginx/logs/statistics.log;
# accounting_interval 30;

# The ngx_http_stub_status_module module provides access to basic status information.
# The following status information is provided:
# Active connections - The current number of active client connections including Waiting 
#		       connections.
# accepts - The total number of accepted client connections.
# handled - The total number of handled connections. Generally, the parameter value is 
#	    the same as accepts unless some resource limits have been reached (for 
#	    example, the worker_connections limit).
# requests - The total number of client requests.
# Reading - The current number of connections where nginx is reading the request header.
# Writing - The current number of connections where nginx is writing the response back
#	    to the client.
# Waiting - The current number of idle client connections waiting for a request.
# How it work? `curl 127.0.0.0.1/status -H "server.status"`.
server {
	listen 		80;
	server_name server.status;

	allow 127.0.0.1;
	deny all;
	modsecurity off;
	testcookie off;

	location =/status {
		stub_status on;
	}

	location / {
		rewrite ^(/.*) /status;
	}
}
