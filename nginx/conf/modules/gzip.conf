# Compress server responses, or decompress them for clients that don’t support compression, to improve delivery speed and reduce overhead on the server.

# Compressing responses often significantly reduces the size of transmitted data.
# However, since compression happens at runtime it can also add considerable 
# processing overhead which can negatively affect performance. NGINX performs 
# compression before sending responses to clients, but does not “double compress”
# responses that are already compressed (for example, by a proxied server).

gzip on;
gzip_http_version 1.1;
gzip_disable "msie6";
gzip_vary on;
gzip_comp_level 6;
gzip_buffers 32 8k;
gzip_min_length 20;
gzip_types
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

# By default, NGINX does not compress responses to proxied requests (requests that 
# come from the proxy server). The fact that a request comes from a proxy server is 
# determined by the presence of the `Via` header field in the request. To configure 
# compression of these responses, use the `gzip_proxied` directive. The directive 
# has a number of parameters specifying which kinds of proxied requests NGINX 
# should compress.

# For example, it is reasonable to compress responses only to requests that will 
# not be cached on the proxy server. For this purpose the `gzip_proxied` directive
# has parameters that instruct NGINX to check the `Cache-Control` header field in 
# a response and compress the response if the value is `no-cache`, `no-store`,
# or `private`. In addition, you must include the `expired` parameter to check 
# the value of the Expires header field. These parameters are set in the following
# example, along with the `auth` parameter, which checks for the presence of the
# Authorization header field (an authorized response is specific to the end user 
# and is not typically cached):
gzip_proxied expired no-cache no-store private auth;
